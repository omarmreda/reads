{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Laptop\\\\Desktop\\\\myreads\\\\myReads-app\\\\starter\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport \"./App.css\";\nimport { useState, useEffect } from \"react\";\nimport { Route, Routes } from \"react-router-dom\";\nimport * as BooksData from \"./BooksAPI\";\nimport Search from \"./Components/Search\";\nimport MainPage from \"./Components/MainPage\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [books, setBooks] = useState(() => []); // Getting default books for home page from API and updating the UI with these books.\n\n  useEffect(() => {\n    const getBooks = async () => {\n      const res = await BooksData.getAll();\n      setBooks(res);\n    };\n\n    getBooks();\n  }, []);\n  const [searchInput, setSearchInput] = useState(() => \"\");\n  const [searchResult, setSearchResult] = useState(() => []); // Haandling the change of search input.\n\n  const handleSearchChange = event => {\n    setSearchInput(event.target.value);\n  }; // updating the search with the search input enteries.\n\n\n  useEffect(() => {\n    if (searchInput) {\n      const searchApi = async () => {\n        try {\n          const searchRes = await BooksData.search(searchInput); // updating book shelves that is already exist on the home page with its shelf.\n\n          const mergedBooks = searchRes.map(searchBook => {\n            const bookFound = books.find(mainBook => mainBook.id === searchBook.id);\n\n            if (bookFound) {\n              return bookFound;\n            } else {\n              return searchBook;\n            }\n          });\n          setSearchResult(mergedBooks);\n        } catch (err) {\n          console.log(`Book not found`);\n        }\n      };\n\n      searchApi();\n    }\n  }, [searchInput]); // handling the change of the shelf through search page and home page.\n\n  const handleShelf = (book, newShelf, isSearch) => {\n    // condition to loop on the current array(search array || home page array).\n    let bookList = isSearch ? searchResult : books;\n    const filteredBook = bookList.find(currentBook => currentBook.id === book.id);\n    filteredBook.shelf = newShelf;\n    const bookIndex = books.findIndex(oldBook => oldBook.id === filteredBook.id); // checking if the book exist or not.\n\n    if (bookIndex !== -1) {\n      let book = { ...books[bookIndex]\n      };\n      book.shelf = newShelf;\n      setBooks([...books]);\n    } else {\n      setBooks([...books, filteredBook]);\n    }\n\n    BooksData.update(book, newShelf);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Routes, {\n    children: [/*#__PURE__*/_jsxDEV(Route, {\n      exact: true,\n      path: \"/\",\n      element: /*#__PURE__*/_jsxDEV(MainPage, {\n        books: books,\n        handleShelf: handleShelf,\n        searchResult: searchResult\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      path: \"/search\",\n      element: /*#__PURE__*/_jsxDEV(Search, {\n        handleShelf: handleShelf,\n        searchInput: searchInput,\n        searchResult: searchResult,\n        handleSearchChange: handleSearchChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"WHODqTxBd3G3Nd9hEu/2DM3zSNw=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/Laptop/Desktop/myreads/myReads-app/starter/src/App.js"],"names":["useState","useEffect","Route","Routes","BooksData","Search","MainPage","App","books","setBooks","getBooks","res","getAll","searchInput","setSearchInput","searchResult","setSearchResult","handleSearchChange","event","target","value","searchApi","searchRes","search","mergedBooks","map","searchBook","bookFound","find","mainBook","id","err","console","log","handleShelf","book","newShelf","isSearch","bookList","filteredBook","currentBook","shelf","bookIndex","findIndex","oldBook","update"],"mappings":"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","sourcesContent":["import \"./App.css\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { Route, Routes } from \"react-router-dom\";\r\nimport * as BooksData from \"./BooksAPI\";\r\nimport Search from \"./Components/Search\";\r\nimport MainPage from \"./Components/MainPage\";\r\n\r\nfunction App() {\r\n  const [books, setBooks] = useState(() => []);\r\n  // Getting default books for home page from API and updating the UI with these books.\r\n  useEffect(() => {\r\n    const getBooks = async () => {\r\n      const res = await BooksData.getAll();\r\n      setBooks(res);\r\n    };\r\n    getBooks();\r\n  }, []);\r\n  const [searchInput, setSearchInput] = useState(() => \"\");\r\n  const [searchResult, setSearchResult] = useState(() => []);\r\n  // Haandling the change of search input.\r\n  const handleSearchChange = (event) => {\r\n    setSearchInput(event.target.value);\r\n  };\r\n\r\n  // updating the search with the search input enteries.\r\n  useEffect(() => {\r\n    if (searchInput) {\r\n      const searchApi = async () => {\r\n        try {\r\n          const searchRes = await BooksData.search(searchInput);\r\n          // updating book shelves that is already exist on the home page with its shelf.\r\n          const mergedBooks = searchRes.map((searchBook) => {\r\n            const bookFound = books.find(\r\n              (mainBook) => mainBook.id === searchBook.id\r\n            );\r\n            if (bookFound) {\r\n              return bookFound;\r\n            } else {\r\n              return searchBook;\r\n            }\r\n          });\r\n\r\n          setSearchResult(mergedBooks);\r\n        } catch (err) {\r\n          console.log(`Book not found`);\r\n        }\r\n      };\r\n      searchApi();\r\n    }\r\n  }, [searchInput]);\r\n\r\n  // handling the change of the shelf through search page and home page.\r\n  const handleShelf = (book, newShelf, isSearch) => {\r\n    // condition to loop on the current array(search array || home page array).\r\n    let bookList = isSearch ? searchResult : books;\r\n\r\n    const filteredBook = bookList.find(\r\n      (currentBook) => currentBook.id === book.id\r\n    );\r\n    filteredBook.shelf = newShelf;\r\n    const bookIndex = books.findIndex(\r\n      (oldBook) => oldBook.id === filteredBook.id\r\n    );\r\n\r\n    // checking if the book exist or not.\r\n    if (bookIndex !== -1) {\r\n      let book = { ...books[bookIndex] };\r\n      book.shelf = newShelf;\r\n      setBooks([...books]);\r\n    } else {\r\n      setBooks([...books, filteredBook]);\r\n    }\r\n\r\n    BooksData.update(book, newShelf);\r\n  };\r\n\r\n  return (\r\n    <Routes>\r\n      <Route\r\n        exact\r\n        path=\"/\"\r\n        element={\r\n          <MainPage\r\n            books={books}\r\n            handleShelf={handleShelf}\r\n            searchResult={searchResult}\r\n          />\r\n        }\r\n      />\r\n      <Route\r\n        path=\"/search\"\r\n        element={\r\n          <Search\r\n            handleShelf={handleShelf}\r\n            searchInput={searchInput}\r\n            searchResult={searchResult}\r\n            handleSearchChange={handleSearchChange}\r\n          />\r\n        }\r\n      />\r\n    </Routes>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}